> x=200
200
> x/5
40
> Math.sin(Math.PI/2)
1
> new Date("2010/1/1")
ISODate("2010-01-01T08:00:00Z")
> new Date("2010/1/1");
ISODate("2010-01-01T08:00:00Z")
> "Hello,World!".replace("World","MongoDB");
Hello,MongoDB!
> function factorial(n){
... if(n<=1) return 1;
... return n*factorial(n-1);
... }
> factorial(5);
120
> b
2020-03-28T21:42:31.520-0700 E  QUERY    [js] uncaught exception: ReferenceError: b is not defined :
@(shell):1:1
> db
test
> use foobar
switched to db foobar
> db
foobar
> use pspk
switched to db pspk
> db
pspk
> post={"title":"My Blog Post",
... "content":"Here's my blog post.",
... "date":new Date()}
{
        "title" : "My Blog Post",
        "content" : "Here's my blog post.",
        "date" : ISODate("2020-03-29T04:44:39.239Z")
}
> db.blog.insert(post)
WriteResult({ "nInserted" : 1 })
> db.blog.find()
{ "_id" : ObjectId("5e8028d718d6cdd09aa1d8b7"), "title" : "My Blog Post", "content" : "Here's my blog post.", "date" : ISODate("2020-03-29T04:44:39.239Z") }
> db.blog.findOne()
{
        "_id" : ObjectId("5e8028d718d6cdd09aa1d8b7"),
        "title" : "My Blog Post",
        "content" : "Here's my blog post.",
        "date" : ISODate("2020-03-29T04:44:39.239Z")
}
> post.comments= []
[ ]
> db.bog.update({title:"My Blog Post"},post)
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.blog.update({title:"My Blog Post"},post)
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.blog.find()
{ "_id" : ObjectId("5e8028d718d6cdd09aa1d8b7"), "title" : "My Blog Post", "content" : "Here's my blog post.", "date" : ISODate("2020-03-29T04:44:39.239Z"), "comments" : [ ] }
> db.blog.remove({title:"My Blog Post"})
WriteResult({ "nRemoved" : 1 })
> db.blog.findOne()
null
> db.blog.find()
> {"x":null}
2020-03-28T21:59:34.453-0700 E  QUERY    [js] uncaught exception: SyntaxError: unexpected token: ':' :
@(shell):1:4
> {"x":true}
2020-03-28T21:59:45.445-0700 E  QUERY    [js] uncaught exception: SyntaxError: unexpected token: ':' :
@(shell):1:4
> host:30000/myDB
2020-03-28T22:01:14.434-0700 E  QUERY    [js] uncaught exception: ReferenceError: myDB is not defined :
@(shell):1:6
> exit
bye

C:\Program Files\MongoDB\Server\4.2\bin>host:30000/myDB
The filename, directory name, or volume label syntax is incorrect.

C:\Program Files\MongoDB\Server\4.2\bin>mongo some-host:30000/myDB
MongoDB shell version v4.2.5
connecting to: mongodb://some-host:30000/myDB?compressors=disabled&gssapiServiceName=mongodb
2020-03-28T22:02:16.042-0700 E  QUERY    [js] Error: couldn't connect to server some-host:30000, connection attempt failed: HostNotFound: Could not find address for some-host:30000: SocketException: No such host is known. :
connect@src/mongo/shell/mongo.js:341:17
@(connect):2:6
2020-03-28T22:02:16.065-0700 F  -        [main] exception: connect failed
2020-03-28T22:02:16.068-0700 E  -        [main] exiting with code 1

C:\Program Files\MongoDB\Server\4.2\bin>mongo --nodb
MongoDB shell version v4.2.5
> conn=new Mongo("some-host:30000")
2020-03-28T22:04:31.650-0700 E  QUERY    [js] Error: couldn't connect to server some-host:30000, connection attempt failed: HostNotFound: Could not find address for some-host:30000: SocketException: No such host is known. :
@(shell):1:6
> exit
bye

C:\Program Files\MongoDB\Server\4.2\bin>sudo mongod --repair
'sudo' is not recognized as an internal or external command,
operable program or batch file.

C:\Program Files\MongoDB\Server\4.2\bin>brew services list
'brew' is not recognized as an internal or external command,
operable program or batch file.

C:\Program Files\MongoDB\Server\4.2\bin>mongo
MongoDB shell version v4.2.5
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("0fbf6dc4-9da2-4b0d-b1f7-6f7349fc5554") }
MongoDB server version: 4.2.5
Server has startup warnings:
2020-03-28T16:13:36.504-0700 I  CONTROL  [initandlisten]
2020-03-28T16:13:36.504-0700 I  CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2020-03-28T16:13:36.504-0700 I  CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2020-03-28T16:13:36.505-0700 I  CONTROL  [initandlisten]
---
Enable MongoDB's free cloud-based monitoring service, which will then receive and display
metrics about your deployment (disk utilization, CPU, operation statistics, etc).

The monitoring data will be available on a MongoDB website with a unique URL accessible to you
and anyone you share the URL with. MongoDB may use this information to make product
improvements and to suggest MongoDB products and deployment options to you.

To enable free monitoring, run the following command: db.enableFreeMonitoring()
To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---

> help
        db.help()                    help on db methods
        db.mycoll.help()             help on collection methods
        sh.help()                    sharding helpers
        rs.help()                    replica set helpers
        help admin                   administrative help
        help connect                 connecting to a db help
        help keys                    key shortcuts
        help misc                    misc things to know
        help mr                      mapreduce

        show dbs                     show database names
        show collections             show collections in current database
        show users                   show users in current database
        show profile                 show most recent system.profile entries with time >= 1ms
        show logs                    show the accessible logger names
        show log [name]              prints out the last segment of log in memory, 'global' is default
        use <db_name>                set current database
        db.foo.find()                list objects in collection foo
        db.foo.find( { a : 1 } )     list objects in foo where a == 1
        it                           result of the last line evaluated; use to further iterate
        DBQuery.shellBatchSize = x   set default number of items to display on shell
        exit                         quit the mongo shell
> db.foo.update
function(query, updateSpec, upsert, multi) {
    var parsed = this._parseUpdate(query, updateSpec, upsert, multi);
    var query = parsed.query;
    var updateSpec = parsed.updateSpec;
    const hint = parsed.hint;
    var upsert = parsed.upsert;
    var multi = parsed.multi;
    var wc = parsed.wc;
    var collation = parsed.collation;
    var arrayFilters = parsed.arrayFilters;

    var result = undefined;
    var startTime =
        (typeof (_verboseShell) === 'undefined' || !_verboseShell) ? 0 : new Date().getTime();

    if (this.getMongo().writeMode() != "legacy") {
        var bulk = this.initializeOrderedBulkOp();
        var updateOp = bulk.find(query);

        if (hint) {
            updateOp.hint(hint);
        }

        if (upsert) {
            updateOp = updateOp.upsert();
        }

        if (collation) {
            updateOp.collation(collation);
        }

        if (arrayFilters) {
            updateOp.arrayFilters(arrayFilters);
        }

        if (multi) {
            updateOp.update(updateSpec);
        } else {
            updateOp.updateOne(updateSpec);
        }

        try {
            result = bulk.execute(wc).toSingleResult();
        } catch (ex) {
            if (ex instanceof BulkWriteError) {
                result = ex.toSingleResult();
            } else if (ex instanceof WriteCommandError) {
                result = ex;
            } else {
                // Other exceptions thrown
                throw ex;
            }
        }
    } else {
        if (collation) {
            throw new Error("collation requires use of write commands");
        }

        if (arrayFilters) {
            throw new Error("arrayFilters requires use of write commands");
        }

        this.getMongo().update(this._fullName, query, updateSpec, upsert, multi);

        // Enforce write concern, if required
        if (wc) {
            result = this.runCommand("getLastError", wc instanceof WriteConcern ? wc.toJSON() : wc);
        }
    }

    this._printExtraInfo("Updated", startTime);
    return result;
}
> mongo script1.js script2.js script3.js
2020-03-28T22:08:20.387-0700 E  QUERY    [js] uncaught exception: SyntaxError: unexpected token: identifier :
@(shell):1:6
> mongo --quiet server-1:30000/foo script1.js script2.js script3.js
2020-03-28T22:09:31.262-0700 E  QUERY    [js] uncaught exception: SyntaxError: unexpected token: identifier :
@(shell):1:8
> load("script1.js")
2020-03-28T22:09:46.192-0700 E  -        [js] file [script1.js] doesn't exist
2020-03-28T22:09:46.192-0700 E  QUERY    [js] Error: error loading js file: script1.js :
@(shell):1:1
> exit
bye

C:\Program Files\MongoDB\Server\4.2\bin>typeof connectTo
'typeof' is not recognized as an internal or external command,
operable program or batch file.

C:\Program Files\MongoDB\Server\4.2\bin>mongo
MongoDB shell version v4.2.5
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("55dd0ce5-11f6-4b12-b10a-60ccf6e89a19") }
MongoDB server version: 4.2.5
Server has startup warnings:
2020-03-28T16:13:36.504-0700 I  CONTROL  [initandlisten]
2020-03-28T16:13:36.504-0700 I  CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2020-03-28T16:13:36.504-0700 I  CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2020-03-28T16:13:36.505-0700 I  CONTROL  [initandlisten]
---
Enable MongoDB's free cloud-based monitoring service, which will then receive and display
metrics about your deployment (disk utilization, CPU, operation statistics, etc).

The monitoring data will be available on a MongoDB website with a unique URL accessible to you
and anyone you share the URL with. MongoDB may use this information to make product
improvements and to suggest MongoDB products and deployment options to you.

To enable free monitoring, run the following command: db.enableFreeMonitoring()
To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---

> typeof connectTo
undefined
> load('defineConnectTo.js')
2020-03-28T22:11:50.491-0700 E  -        [js] file [defineConnectTo.js] doesn't exist
2020-03-28T22:11:50.491-0700 E  QUERY    [js] Error: error loading js file: defineConnectTo.js :
@(shell):1:1
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
pspk    0.000GB
> use foo
switched to db foo
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
pspk    0.000GB
> show collections
> db.getSisterDB("foo")
foo
> db.getMongo().getDBs()
{
        "databases" : [
                {
                        "name" : "admin",
                        "sizeOnDisk" : 40960,
                        "empty" : false
                },
                {
                        "name" : "config",
                        "sizeOnDisk" : 73728,
                        "empty" : false
                },
                {
                        "name" : "local",
                        "sizeOnDisk" : 73728,
                        "empty" : false
                },
                {
                        "name" : "pspk",
                        "sizeOnDisk" : 61440,
                        "empty" : false
                }
        ],
        "totalSize" : 249856,
        "ok" : 1
}
> db.getCollectionNames()
[ ]
> show collections
> var connectTo = function(port, dbname) {    if (!port) {        port = 27017;    }
...     if (!dbname) {        dbname = "test";    }
...     db = connect("localhost:"+port+"/"+dbname);    return db; };
> typeof connectTo
function
> load('defineConnectTo.js')
2020-03-28T22:15:42.056-0700 E  -        [js] file [defineConnectTo.js] doesn't exist
2020-03-28T22:15:42.057-0700 E  QUERY    [js] Error: error loading js file: defineConnectTo.js :
@(shell):1:1
> load("defineConnectTo.js")
2020-03-28T22:15:51.153-0700 E  -        [js] file [defineConnectTo.js] doesn't exist
2020-03-28T22:15:51.154-0700 E  QUERY    [js] Error: error loading js file: defineConnectTo.js :
@(shell):1:1
> typeof connectTo
function
>